/* 
 * tsh - A tiny shell program with job control
 * 
 * <Put your name and login ID here>
 */
/* Name:Piyush Datani Vasudev
   EmailID:201401130@daiict.ac.in
*/
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <ctype.h>
#include <signal.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <errno.h>

/* Misc manifest constants */
#define MAXLINE    1024   /* max line size */
#define MAXARGS     128   /* max args on a command line */
#define MAXJOBS      16   /* max jobs at any point in time */
#define MAXJID    1<<16   /* max job ID */

/* Job states */
#define UNDEF 0 /* undefined */
#define FG 1    /* running in foreground */
#define BG 2    /* running in background */
#define ST 3    /* stopped */

/* 
 * Jobs states: FG (foreground), BG (background), ST (stopped)
 * Job state transitions and enabling actions:
 *     FG -> ST  : ctrl-z
 *     ST -> FG  : fg command
 *     ST -> BG  : bg command
 *     BG -> FG  : fg command
 * At most 1 job can be in the FG state.
 */

/* Global variables */
extern char **environ;      /* defined in libc */
char prompt[] = "tsh> ";    /* command line prompt (DO NOT CHANGE) */
int verbose = 0;            /* if true, print additional output */
int nextjid = 1;            /* next job ID to allocate */
char sbuf[MAXLINE];         /* for composing sprintf messages */

struct job_t {              /* The job struct */
    pid_t pid;              /* job PID */
    int jid;                /* job ID [1, 2, ...] */
    int state;              /* UNDEF, BG, FG, or ST */
    char cmdline[MAXLINE];  /* command line */
};
struct job_t jobs[MAXJOBS]; /* The job list */
/* End global variables */


/* Function prototypes */

/* Here are the functions that you will implement */
void eval(char *cmdline);
int builtin_cmd(char **argv);
void do_bgfg(char **argv);
void waitfg(pid_t pid);

void sigchld_handler(int sig);
void sigtstp_handler(int sig);
void sigint_handler(int sig);

/* Here are helper routines that we've provided for you */
int parseline(const char *cmdline, char **argv); 
void sigquit_handler(int sig);

void clearjob(struct job_t *job);
void initjobs(struct job_t *jobs);
int maxjid(struct job_t *jobs); 
int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline);
int deletejob(struct job_t *jobs, pid_t pid); 
pid_t fgpid(struct job_t *jobs);
struct job_t *getjobpid(struct job_t *jobs, pid_t pid);
struct job_t *getjobjid(struct job_t *jobs, int jid); 
int pid2jid(pid_t pid); 
void listjobs(struct job_t *jobs);

void usage(void);
void unix_error(char *msg);
void app_error(char *msg);
typedef void handler_t(int);
handler_t *Signal(int signum, handler_t *handler);

/*
 * main - The shell's main routine 
 */
int main(int argc, char **argv) 
{
    char c;
    char cmdline[MAXLINE];
    int emit_prompt = 1; /* emit prompt (default) */

    /* Redirect stderr to stdout (so that driver will get all output
     * on the pipe connected to stdout) */
    dup2(1, 2);

    /* Parse the command line */
    while ((c = getopt(argc, argv, "hvp")) != EOF) {
        switch (c) {
        case 'h':             /* print help message */
            usage();
	    break;
        case 'v':             /* emit additional diagnostic info */
            verbose = 1;
	    break;
        case 'p':             /* don't print a prompt */
            emit_prompt = 0;  /* handy for automatic testing */
	    break;
	default:
            usage();
	}
    }

    /* Install the signal handlers */

    /* These are the ones you will need to implement */
    Signal(SIGINT,  sigint_handler);   /* ctrl-c */
    Signal(SIGTSTP, sigtstp_handler);  /* ctrl-z */
    Signal(SIGCHLD, sigchld_handler);  /* Terminated or stopped child */

    /* This one provides a clean way to kill the shell */
    Signal(SIGQUIT, sigquit_handler); 

    /* Initialize the job list */
    initjobs(jobs);

    /* Execute the shell's read/eval loop */
    while (1) {

	/* Read command line */
	if (emit_prompt) {
	    printf("%s", prompt);
	    fflush(stdout);
	}
	if ((fgets(cmdline, MAXLINE, stdin) == NULL) && ferror(stdin))
	    app_error("fgets error");
	if (feof(stdin)) { /* End of file (ctrl-d) */
	    fflush(stdout);
	    exit(0);
	}

	/* Evaluate the command line */

	eval(cmdline);
	fflush(stdout);

	fflush(stdout);
    } 

    exit(0); /* control never reaches here */
}
  
/* 
 * eval - Evaluate the command line that the user has just typed in
 * 
 * If the user has requested a built-in command (quit, jobs, bg or fg)
 * then execute it immediately. Otherwise, fork a child process and
 * run the job in the context of the child. If the job is running in
 * the foreground, wait for it to terminate and then return.  Note:
 * each child process must have a unique process group ID so that our
 * background children don't receive SIGINT (SIGTSTP) from the kernel
 * when we type ctrl-c (ctrl-z) at the keyboard.  
*/
void eval(char *cmdline) 
{
	sigset_t sset;    
	sigemptyset(&sset);
	sigaddset(&sset,SIGCHLD);       
	int pid,count;
	char *argv[MAXARGS];
		int par;
	par= parseline(cmdline,argv);   /*par is the return value of parseline function*/
     if(strcmp(cmdline,"\n")==0)        /*if our input is nothing just an enter then this case is useful*/
{
	return ;
}
	else
	{
		count=builtin_cmd(argv);       /*count is the return value of builtin_cmd and is zero if builtin_cmd is not found*/
		if(count==0)
		{
			sigprocmask(SIG_BLOCK,&sset,NULL);      /*from this point we are blocking SIGCHILD as the code below this is the critical section....*/     
			pid=fork();                                                                   
			if(pid==0)                  
			{
				setpgrp();  /*Setting the group id of child to it's parent id*/
				sigprocmask(SIG_UNBLOCK,&sset,NULL);  /*Unblocking the SIGCHILD Signal*/
				count=execv(*argv,argv);  /*count is the return value of exec and is -1 if file or the command does not exist*/
				if(count==-1)             /*Exec returns -1 if their is a error in executing a file*/
				{
					printf("%s command not found\n",argv[0]);
					exit(1);
				}
			}
			else
			{
				if(par==1)
				{
					addjob(jobs,pid,BG,cmdline); /*par is the return vaue of parseline function and it return's bg so if it's 1 then we have to add BG job*/
					sigprocmask(SIG_UNBLOCK,&sset,NULL);   /*Unblocking the SIGCHILD Signal*/
					printf("[%d] (%d) %s",pid2jid(pid),pid,cmdline);
				}                   
				else
					{
					  addjob(jobs,pid,FG,cmdline);	/*Else we have to add a FG job*/
						sigprocmask(SIG_UNBLOCK,&sset,NULL);	/*Unblocking the SIGCHILD Signal*/
						waitfg(pid);	
					}
			}
		}
	}
    return;
}

/* 
 * parseline - Parse the command line and build the argv array.
 * 
 * Characters enclosed in single quotes are treated as a single
 * argument.  Return true if the user has requested a BG job, false if
 * the user has requested a FG job.  
 */
int parseline(const char *cmdline, char **argv) 
{
    static char array[MAXLINE]; /* holds local copy of command line */
    char *buf = array;          /* ptr that traverses command line */
    char *delim;                /* points to first space delimiter */
    int argc;                   /* number of args */
    int bg;                     /* background job? */

    strcpy(buf, cmdline);
    buf[strlen(buf)-1] = ' ';  /* replace trailing '\n' with space */
    while (*buf && (*buf == ' ')) /* ignore leading spaces */
	buf++;

    /* Build the argv list */
    argc = 0;
    if (*buf == '\'') {
	buf++;
	delim = strchr(buf, '\'');
    }
    else {
	delim = strchr(buf, ' ');
    }

    while (delim) {
	argv[argc++] = buf;
	*delim = '\0';
	buf = delim + 1;
	while (*buf && (*buf == ' ')) /* ignore spaces */
	       buf++;

	if (*buf == '\'') {
	    buf++;
	    delim = strchr(buf, '\'');
	}
	else {
	    delim = strchr(buf, ' ');
	}
    }
    argv[argc] = NULL;
    
    if (argc == 0)  /* ignore blank line */
	return 1;

    /* should the job run in the background? */
    if ((bg = (*argv[argc-1] == '&')) != 0) {
	argv[--argc] = NULL;
    }
    return bg;
}

/* 
 * builtin_cmd - If the user has typed a built-in command then execute
 *    it immediately.  
 */
int builtin_cmd(char **argv) 
{
	int count=0;
	if(strcmp(argv[0],"quit")==0)  /*if we type quit then the following block will be executed*/
	{
		for(count=0;count<MAXJOBS;count++)   /*In this we have to check the complete jobs array and compare if the state is ST or not if it's ST then we have to return 1 then we have to exit*/
		{
			if(jobs[count].state==ST)		
			{		
				return 1;
			}
			else
			{
				exit(0);
			}
		}
	}
	else if(strcmp(argv[0],"jobs")==0)
	{
		listjobs(jobs);   /*if we type jobs then listjobs is called in it which further prints the jobs and their status(Running,Stopped..)*/
		return 1;
	}
	else if(strcmp(argv[0],"fg")==0||strcmp(argv[0],"bg")==0)   /*if we type fg or bg then it calls do_bgfg which further checks if the jobid or pid is correct or not*/
	{
		do_bgfg(argv);
		return 1;
	}
	else
	{
		return 0;
	}    /* not a builtin command */
}
/* 
 * do_bgfg - Execute the builtin bg and fg commands
 */
void do_bgfg(char **argv) 
{

   int j=0,flag=0;
   int flag1=1;
   char *p=argv[1]; /*Here p is a pointer to argv[1]*/
   if(p==NULL)  /*if we just write fg or bg and nothing else then pinter should be pointing to null so the command requires pid or %jobid*/
   {
	if(strcmp(argv[0],"fg")==0)
	printf("fg command requires PID or %%jobid argument\n");
	else
	printf("bg command requires PID or %%jobid argument\n");
	return;
   }
   while(j<strlen(argv[1]))   /*This while loop is for Checking whether argv[1] is a valid positive integer or it's %+(positive integer)*/
	{
		if(argv[1][0]==37)  /*This one is for the checking of valid %jobid*/
		{
			if(j!=0)
			{
				if(argv[1][j]<48||argv[1][j]>57)  /*Anything less than 48 and greater than 57 is not acceptable*/
					{
						if(strcmp(argv[0],"fg")==0)
						printf("fg: argument must be a PID or %%jobid \n");
						else
						printf("bg: argument must be a PID or %%jobid \n");
						flag=1;
						break;
					}
			}
		}
		else
		{
 		if(argv[1][j]<48||argv[1][j]>57)     /*Anything less than 48 and greater than 57 is not acceptable*/
		{
			if(strcmp(argv[0],"fg")==0)
			printf("fg: argument must be a PID or %%jobid \n");
			else
			printf("bg: argument must be a PID or %%jobid \n");
			flag=1;
			break;
		}
		}
		j++;
        }
	if(flag==0)   /*if argv[1] is a number or %+(number) hten we have to check whether it's a valid pid,jid or not*/
		{
			if(argv[1][0]!='%')
			{
				flag1=0;
			}
			if(argv[1][0]!='%'&&getjobpid(jobs,atoi(argv[1]))==NULL)
			{
				printf("(%s): No such process\n",argv[1]);
				return;
			}
			if(argv[1][0]=='%')
			{
				argv[1][0]='0';
				if(getjobjid(jobs,atoi(argv[1]))==NULL)  /*if getjobjid returns NULL means no such job exists*/
				{
				if(strcmp(argv[0],"fg")==0)
				{
				printf("%c%s: No such Job\n",'%',&argv[1][1]);
				return;
				}
				else
				{
				printf("%c%s: No such Job\n",'%',&argv[1][1]);
				return;
				}
				}
			}
	if(strcmp(argv[0],"fg")==0)    /*if the process has reached here then it's a valid pid or jid then we have modify it as per the command given to it*/
	{
	/*it's flag1=0(for pid) else flag1=1(for jid) and if the command is fg then we have to find a job of the input pid and change it's state to FG and then pass a SIGCONT signal to all the pid's having Group id equal to the abs(pid)*/
		if(flag1==0)     
		{
			struct job_t *job=getjobpid(jobs,atoi(argv[1]));
			job->state=FG;
			kill(-job->pid,SIGCONT);  
			waitfg(job->pid);
		}
		else
		{
			struct job_t *job=getjobjid(jobs,atoi(argv[1]));
			job->state=FG;
			kill(-1*job->pid,SIGCONT);
			waitfg(job->pid);
		}
	}
	else if(strcmp(argv[0],"bg")==0)
	{
		if(flag1==0)   /*if it's a pid then flag1=0(for pid) else flag1=1(for jid) and if the command is bg then we have to find a job of the input pid or jid and compare it's state to ST and if it's found then it to BG and then pass a SIGCONT signal to all the pid's having Group id equal to the abs(pid)*/
		{
			struct job_t *job=getjobpid(jobs,atoi(argv[1]));
			if(job->state==ST)
			{
			printf("[%d] (%d) %s",job->jid,job ->pid,job->cmdline);
			job->state=BG;	
			sleep(1);
			kill(-job->pid,SIGCONT);
			}
		}
		else
		{
			struct job_t *job=getjobjid(jobs,atoi(argv[1]));
			if(job->state==ST)
			{
			printf("[%d] (%d) %s",job->jid,job ->pid,job->cmdline);
			job->state=BG;
			sleep(1);
			kill(-job->pid,SIGCONT);		
			}
		}
	}
    return;
}
}

/* 
 * waitfg - Block until process pid is no longer the foreground process
 */
void waitfg(pid_t pid)
{
	while(pid==fgpid(jobs))
	{
		sleep(0);
	}
    return;
}

/*****************
 * Signal handlers
 *****************/

/* 
 * sigchld_handler - The kernel sends a SIGCHLD to the shell whenever
 *     a child job terminates (becomes a zombie), or stops because it
 *     received a SIGSTOP or SIGTSTP signal. The handler reaps all
 *     available zombie children, but doesn't wait for any other
 *     currently running children to terminate.  
 */
void sigchld_handler(int sig) 
{
	pid_t pid;
	int status;
	while(1)
	{
		pid=waitpid(-1,&status,WNOHANG|WUNTRACED);  /*returns the pid that has terminated and returns -1 if the process has no children and returns 0 if the the process has children but has not terminated yet*/
		if(pid>0)
		{
		if(WIFEXITED(status))  /*if has terminated normally hten this will be executed*/
		{
			deletejob(jobs,pid);
		}
		else if(WIFSIGNALED(status))  /*if terminated by some signal then this oe is executed*/
		{
			printf("Job [%d] (%d) terminated by signal 2\n",pid2jid(pid),pid);
			deletejob(jobs,pid);
		}
		else if(WIFSTOPPED(status))   /*if stopped by some signal then this one is executed*/
		{
			printf("Job [%d] (%d) stopped by signal 20\n",pid2jid(pid),pid);
			getjobpid(jobs,pid)->state=ST;
		}
		}
		else
		{
			break;
		}
	}
    return;
}

/* 
 * sigint_handler - The kernel sends a SIGINT to the shell whenver the
 *    user types ctrl-c at the keyboard.  Catch it and send it along
 *    to the foreground job.  
 */
void sigint_handler(int sig) 
{/*passes the SIGINT signal to all the fg process*/
    pid_t p;
    p=fgpid(jobs);  
    if(p==0)
	{
		printf("Currently no fg process\n");
	}
    else
	{
		kill(-p,SIGINT);
	}	
    return;
}

/*
 * sigtstp_handler - The kernel sends a SIGTSTP to the shell whenever
 *     the user types ctrl-z at the keyboard. Catch it and suspend the
 *     foreground job by sending it a SIGTSTP.  
 */
void sigtstp_handler(int sig) 
{/*passes the SIGSTP signal to all the fg process*/
 pid_t p;
    p=fgpid(jobs);
    if(p==0)
	{
		printf("Currently no fg process\n");
	}
    else
	{
		kill(-p,SIGTSTP);
	}
    return;
}

/*********************
 * End signal handlers
 *********************/

/***********************************************
 * Helper routines that manipulate the job list
 **********************************************/

/* clearjob - Clear the entries in a job struct */
void clearjob(struct job_t *job) {
    job->pid = 0;
    job->jid = 0;
    job->state = UNDEF;
    job->cmdline[0] = '\0';
}

/* initjobs - Initialize the job list */
void initjobs(struct job_t *jobs) {
    int i;

    for (i = 0; i < MAXJOBS; i++)
	clearjob(&jobs[i]);
}

/* maxjid - Returns largest allocated job ID */
int maxjid(struct job_t *jobs) 
{
    int i, max=0;

    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].jid > max)
	    max = jobs[i].jid;
    return max;
}

/* addjob - Add a job to the job list */
int addjob(struct job_t *jobs, pid_t pid, int state, char *cmdline) 
{
    int i;
    
    if (pid < 1)
	return 0;

    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid == 0) {
	    jobs[i].pid = pid;
	    jobs[i].state = state;
	    jobs[i].jid = nextjid++;
	    if (nextjid > MAXJOBS)
		nextjid = 1;
	    strcpy(jobs[i].cmdline, cmdline);
  	    if(verbose){
	        printf("Added job [%d] %d %s\n", jobs[i].jid, jobs[i].pid, jobs[i].cmdline);
            }
            return 1;
	}
    }
    printf("Tried to create too many jobs\n");
    return 0;
}

/* deletejob - Delete a job whose PID=pid from the job list */
int deletejob(struct job_t *jobs, pid_t pid) 
{
    int i;

    if (pid < 1)
	return 0;

    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid == pid) {
	    clearjob(&jobs[i]);
	    nextjid = maxjid(jobs)+1;
	    return 1;
	}
    }
    return 0;
}

/* fgpid - Return PID of current foreground job, 0 if no such job */
pid_t fgpid(struct job_t *jobs) {
    int i;

    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].state == FG)
	    return jobs[i].pid;
    return 0;
}

/* getjobpid  - Find a job (by PID) on the job list */
struct job_t *getjobpid(struct job_t *jobs, pid_t pid) {
    int i;

    if (pid < 1)
	return NULL;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].pid == pid)
	    return &jobs[i];
    return NULL;
}

/* getjobjid  - Find a job (by JID) on the job list */
struct job_t *getjobjid(struct job_t *jobs, int jid) 
{
    int i;

    if (jid < 1)
	return NULL;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].jid == jid)
	    return &jobs[i];
    return NULL;
}

/* pid2jid - Map process ID to job ID */
int pid2jid(pid_t pid) 
{
    int i;

    if (pid < 1)
	return 0;
    for (i = 0; i < MAXJOBS; i++)
	if (jobs[i].pid == pid) {
            return jobs[i].jid;
        }
    return 0;
}

/* listjobs - Print the job list */
void listjobs(struct job_t *jobs) 
{
    int i;
    
    for (i = 0; i < MAXJOBS; i++) {
	if (jobs[i].pid != 0) {
	    printf("[%d] (%d) ", jobs[i].jid, jobs[i].pid);
	    switch (jobs[i].state) {
		case BG: 
		    printf("Running ");
		    break;
		case FG: 
		    printf("Foreground ");
		    break;
		case ST: 
		    printf("Stopped ");
		    break;
	    default:
		    printf("listjobs: Internal error: job[%d].state=%d ", 
			   i, jobs[i].state);
	    }
	    printf("%s", jobs[i].cmdline);
	}
    }
}
/******************************
 * end job list helper routines
 ******************************/


/***********************
 * Other helper routines
 ***********************/

/*
 * usage - print a help message
 */
void usage(void) 
{
    printf("Usage: shell [-hvp]\n");
    printf("   -h   print this message\n");
    printf("   -v   print additional diagnostic information\n");
    printf("   -p   do not emit a command prompt\n");
    exit(1);
}

/*
 * unix_error - unix-style error routine
 */
void unix_error(char *msg)
{
    fprintf(stdout, "%s: %s\n", msg, strerror(errno));
    exit(1);
}

/*
 * app_error - application-style error routine
 */
void app_error(char *msg)
{
    fprintf(stdout, "%s\n", msg);
    exit(1);
}

/*
 * Signal - wrapper for the sigaction function
 */
handler_t *Signal(int signum, handler_t *handler) 
{
    struct sigaction action, old_action;

    action.sa_handler = handler;  
    sigemptyset(&action.sa_mask); /* block sigs of type being handled */
    action.sa_flags = SA_RESTART; /* restart syscalls if possible */

    if (sigaction(signum, &action, &old_action) < 0)
	unix_error("Signal error");
    return (old_action.sa_handler);
}

/*
 * sigquit_handler - The driver program can gracefully terminate the
 *    child shell by sending it a SIGQUIT signal.
 */
void sigquit_handler(int sig) 
{
    printf("Terminating after receipt of SIGQUIT signal\n");
    exit(1);
}



